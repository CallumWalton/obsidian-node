#cloud-config
# Obsidian Client Node CloudInit Configuration
# For Ubuntu 24.04 LTS on Hetzner Cloud CX21 or equivalent
# 
# This cloud-init configuration will:
# 1. Set up the client node with proper security
# 2. Download and execute the client bootstrap script
# 3. Join the WireGuard VPN and Obsidian cluster
#
# Required variables (set via cloud provider metadata or environment):
# - GITHUB_PAT_TOKEN: Personal Access Token for GitHub repository access
# - CNC_DOMAIN: C&C server domain (e.g., cnc.obsidian.example.com)
# - CNC_PUBLIC_KEY: WireGuard public key from C&C server
# - NODE_VPN_IP: VPN IP address for this node (e.g., 10.0.0.2)
# - CLUSTER_JOIN_TOKEN: Token for joining the cluster
# - NODE_NAME: Unique name for this node (e.g., game-node-01)
# Note: S3 backups are currently disabled

# Package management
package_update: true
package_upgrade: true
packages:
  - curl
  - wget
  - git
  - htop
  - vim
  - unattended-upgrades

# Users
users:
  - name: obsidian
    groups: [adm, docker, sudo]
    sudo: ['ALL=(ALL) NOPASSWD:ALL']
    shell: /bin/bash
    ssh_authorized_keys:
      - ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAACAQC... # Replace with your SSH public key

# Hostname (will be overridden by NODE_NAME if provided)
hostname: obsidian-node
timezone: UTC

# Automatic security updates
write_files:
  # Unattended upgrades configuration
  - path: /etc/apt/apt.conf.d/50unattended-upgrades
    content: |
      Unattended-Upgrade::Allowed-Origins {
          "${distro_id}:${distro_codename}";
          "${distro_id}:${distro_codename}-security";
          "${distro_id}ESMApps:${distro_codename}-apps-security";
          "${distro_id}ESM:${distro_codename}-infra-security";
      };
      Unattended-Upgrade::DevRelease "auto";
      Unattended-Upgrade::Remove-Unused-Kernel-Packages "true";
      Unattended-Upgrade::Remove-New-Unused-Dependencies "true";
      Unattended-Upgrade::Remove-Unused-Dependencies "true";
      Unattended-Upgrade::Automatic-Reboot "true";
      Unattended-Upgrade::Automatic-Reboot-Time "03:00";
    permissions: '0644'

  # Environment variables for the bootstrap script
  - path: /opt/obsidian-env
    content: |
      export GITHUB_PAT_TOKEN="${GITHUB_PAT_TOKEN:-ghp_your_pat_token_here}"
      export CNC_DOMAIN="${CNC_DOMAIN:-cnc.obsidian.local}"
      export CNC_PUBLIC_KEY="${CNC_PUBLIC_KEY:-}"
      export NODE_VPN_IP="${NODE_VPN_IP:-10.0.0.2}"
      export CLUSTER_JOIN_TOKEN="${CLUSTER_JOIN_TOKEN:-default-token}"
      export NODE_NAME="${NODE_NAME:-obsidian-node-$(hostname)}"
      export WG_PORT="${WG_PORT:-51820}"
      export COCKPIT_PORT="${COCKPIT_PORT:-9090}"
      export PTERODACTYL_TOKEN="${PTERODACTYL_TOKEN:-}"
      export PTERODACTYL_URL="${PTERODACTYL_URL:-}"
    permissions: '0600'
    owner: root:root

  # SSH configuration hardening
  - path: /etc/ssh/sshd_config.d/obsidian-hardening.conf
    content: |
      # Obsidian SSH Security Configuration
      Protocol 2
      PermitRootLogin no
      PasswordAuthentication no
      PubkeyAuthentication yes
      AuthorizedKeysFile .ssh/authorized_keys
      PermitEmptyPasswords no
      ChallengeResponseAuthentication no
      UsePAM yes
      X11Forwarding no
      PrintMotd no
      ClientAliveInterval 300
      ClientAliveCountMax 2
      AllowUsers obsidian
      MaxAuthTries 3
      MaxSessions 2
    permissions: '0644'

  # Pre-deployment validation script
  - path: /opt/validate-deployment.sh
    content: |
      #!/bin/bash
      # Pre-deployment validation for Obsidian client node
      
      set -euo pipefail
      
      source /opt/obsidian-env
      
      echo "=== Obsidian Client Node Pre-Deployment Validation ===" | tee /var/log/obsidian-validation.log
      echo "Timestamp: $(date)" | tee -a /var/log/obsidian-validation.log
      
      # Check required environment variables
      REQUIRED_VARS=("CNC_DOMAIN" "CNC_PUBLIC_KEY" "NODE_VPN_IP" "CLUSTER_JOIN_TOKEN")
      
      for var in "${REQUIRED_VARS[@]}"; do
          if [[ -z "${!var:-}" ]]; then
              echo "ERROR: Required variable $var is not set" | tee -a /var/log/obsidian-validation.log
              exit 1
          else
              echo "✓ $var is set" | tee -a /var/log/obsidian-validation.log
          fi
      done
      
      # Test connectivity to C&C server
      if ping -c 3 "${CNC_DOMAIN}" > /dev/null 2>&1; then
          echo "✓ C&C server ${CNC_DOMAIN} is reachable" | tee -a /var/log/obsidian-validation.log
      else
          echo "WARNING: C&C server ${CNC_DOMAIN} is not reachable" | tee -a /var/log/obsidian-validation.log
      fi
      
      # Check if WireGuard port is accessible
      if nc -zu "${CNC_DOMAIN}" "${WG_PORT}" 2>/dev/null; then
          echo "✓ WireGuard port ${WG_PORT} is accessible on C&C server" | tee -a /var/log/obsidian-validation.log
      else
          echo "WARNING: WireGuard port ${WG_PORT} is not accessible" | tee -a /var/log/obsidian-validation.log
      fi
      
      echo "Pre-deployment validation complete" | tee -a /var/log/obsidian-validation.log
    permissions: '0755'
    owner: root:root

  # System monitoring script
  - path: /opt/system-monitor.sh
    content: |
      #!/bin/bash
      # Basic system monitoring for client node
      
      source /opt/obsidian-env 2>/dev/null || true
      
      echo "=== Obsidian Client Node Status ===" > /var/log/obsidian-status.log
      echo "Node name: ${NODE_NAME:-$(hostname)}" >> /var/log/obsidian-status.log
      echo "Deployment time: $(date)" >> /var/log/obsidian-status.log
      echo "Hostname: $(hostname)" >> /var/log/obsidian-status.log
      echo "Public IP: $(curl -s http://checkip.amazonaws.com/ 2>/dev/null || echo 'Unknown')" >> /var/log/obsidian-status.log
      echo "VPN IP: ${NODE_VPN_IP:-Not set}" >> /var/log/obsidian-status.log
      echo "C&C Server: ${CNC_DOMAIN:-Not set}" >> /var/log/obsidian-status.log
      echo "Memory usage: $(free -h)" >> /var/log/obsidian-status.log
      echo "Disk usage: $(df -h /)" >> /var/log/obsidian-status.log
      echo "WireGuard status: $(systemctl is-active wg-quick@wg0 2>/dev/null || echo 'Not active')" >> /var/log/obsidian-status.log
      echo "Cockpit status: $(systemctl is-active cockpit.socket 2>/dev/null || echo 'Not active')" >> /var/log/obsidian-status.log
      echo "Docker status: $(systemctl is-active docker 2>/dev/null || echo 'Not active')" >> /var/log/obsidian-status.log
    permissions: '0755'
    owner: root:root

  # Post-deployment registration script
  - path: /opt/register-with-cnc.sh
    content: |
      #!/bin/bash
      # Register this node with the C&C server
      
      set -euo pipefail
      
      source /opt/obsidian-env
      
      echo "Registering with C&C server..." | tee -a /var/log/obsidian-registration.log
      
      # Wait for bootstrap to complete and services to be available
      sleep 60
      
      # Get our WireGuard public key
      if [[ -f /etc/wireguard/publickey ]]; then
          OUR_PUBLIC_KEY=$(cat /etc/wireguard/publickey)
      else
          echo "ERROR: WireGuard public key not found" | tee -a /var/log/obsidian-registration.log
          exit 1
      fi
      
      # Prepare registration data
      REGISTRATION_DATA=$(cat << EOF
      {
          "hostname": "${NODE_NAME}",
          "public_key": "${OUR_PUBLIC_KEY}",
          "wireguard_ip": "${NODE_VPN_IP}",
          "cockpit_url": "https://${NODE_VPN_IP}:${COCKPIT_PORT}"
      }
      EOF
      )
      
      # Attempt registration with C&C server
      if curl -X POST \
          -H "Content-Type: application/json" \
          -H "Authorization: Bearer ${CLUSTER_JOIN_TOKEN}" \
          -d "${REGISTRATION_DATA}" \
          "https://${CNC_DOMAIN}/api/cluster/join"; then
          echo "✓ Successfully registered with C&C server" | tee -a /var/log/obsidian-registration.log
      else
          echo "WARNING: Failed to register with C&C server - will retry later" | tee -a /var/log/obsidian-registration.log
          # Set up retry mechanism via cron
          echo "*/10 * * * * /opt/register-with-cnc.sh" | crontab -
      fi
    permissions: '0755'
    owner: root:root

  # Post-deployment VPN configuration script
  - path: /opt/configure-vpn.sh
    content: |
      #!/bin/bash
      # Configure VPN connection after C&C server provides details
      
      set -euo pipefail
      
      source /opt/obsidian-env
      
      echo "Retrieving WireGuard server public key from C&C server..." | tee -a /var/log/obsidian-vpn-config.log
      
      # Retry logic for server public key retrieval
      MAX_ATTEMPTS=10
      ATTEMPT=1
      
      while [[ $ATTEMPT -le $MAX_ATTEMPTS ]]; do
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS to retrieve server public key" | tee -a /var/log/obsidian-vpn-config.log
          
          # Try to get server public key from C&C server
          if SERVER_PUBLIC_KEY=$(curl -s --connect-timeout 10 --max-time 30 "https://${CNC_DOMAIN}/wireguard/public-key" 2>/dev/null); then
              if [[ -n "$SERVER_PUBLIC_KEY" && ${#SERVER_PUBLIC_KEY} -gt 40 ]]; then
                  echo "✓ Retrieved server public key" | tee -a /var/log/obsidian-vpn-config.log
                  break
              fi
          fi
          
          # Fallback: try to get from server info endpoint
          if SERVER_INFO=$(curl -s --connect-timeout 10 --max-time 30 "https://${CNC_DOMAIN}/api/server/info" 2>/dev/null); then
              SERVER_PUBLIC_KEY=$(echo "$SERVER_INFO" | jq -r '.wireguard_public_key // empty' 2>/dev/null)
              if [[ -n "$SERVER_PUBLIC_KEY" && ${#SERVER_PUBLIC_KEY} -gt 40 ]]; then
                  echo "✓ Retrieved server public key from API" | tee -a /var/log/obsidian-vpn-config.log
                  break
              fi
          fi
          
          echo "Failed to retrieve server public key, retrying in 30s..." | tee -a /var/log/obsidian-vpn-config.log
          sleep 30
          ((ATTEMPT++))
      done
      
      if [[ -z "${SERVER_PUBLIC_KEY:-}" ]]; then
          echo "ERROR: Could not retrieve server public key after $MAX_ATTEMPTS attempts" | tee -a /var/log/obsidian-vpn-config.log
          echo "Please manually configure WireGuard with server public key" | tee -a /var/log/obsidian-vpn-config.log
          exit 1
      fi
      
      # Update WireGuard configuration
      /opt/obsidian-node/scripts/update_wireguard_config.sh "${SERVER_PUBLIC_KEY}" "${NODE_VPN_IP}" "${CNC_DOMAIN}:${WG_PORT}"
      
      # Enable and start WireGuard
      systemctl enable wg-quick@wg0.service
      systemctl start wg-quick@wg0.service
      
      echo "VPN configuration complete" | tee -a /var/log/obsidian-vpn-config.log
    permissions: '0755'
    owner: root:root

# System configuration
bootcmd:
  # Ensure proper time sync
  - timedatectl set-ntp true
  - systemctl enable systemd-timesyncd

runcmd:
  # Update system packages
  - apt-get update
  - apt-get upgrade -y
  - apt-get install -y netcat-openbsd
  
  # Set hostname if NODE_NAME is provided
  - |
    source /opt/obsidian-env
    if [[ -n "${NODE_NAME:-}" ]]; then
      hostnamectl set-hostname "${NODE_NAME}"
    fi
  
  # Configure automatic security updates
  - echo 'Unattended-Upgrade::Automatic-Reboot "true";' >> /etc/apt/apt.conf.d/50unattended-upgrades
  - systemctl enable unattended-upgrades
  - systemctl start unattended-upgrades
  
  # Run pre-deployment validation
  - /opt/validate-deployment.sh
  
  # Configure Git authentication
  - source /opt/obsidian-env
  - git config --global user.name "Obsidian CloudInit Client"
  - git config --global user.email "client@obsidian.example.com"
  - echo "https://${GITHUB_PAT_TOKEN}@github.com" > /root/.git-credentials
  - git config --global credential.helper store
  
  # Clone repository and get bootstrap script
  - cd /tmp
  - git clone https://github.com/CallumWalton/obsidian-node.git
  - cd obsidian-node
  - cp obsidian_bootstrap.sh /root/
  - chmod +x /root/obsidian_bootstrap.sh
  
  # Create WireGuard client configuration from environment
  - |
    source /opt/obsidian-env
    mkdir -p /etc/wireguard
    cat > /tmp/wg0.conf << EOF
    [Interface]
    PrivateKey = PLACEHOLDER_PRIVATE_KEY
    Address = ${NODE_VPN_IP}/32
    DNS = 10.0.0.1
    
    [Peer]
    PublicKey = ${CNC_PUBLIC_KEY}
    Endpoint = ${CNC_DOMAIN}:${WG_PORT}
    AllowedIPs = 0.0.0.0/1, 128.0.0.0/1, ::/1, 8000::/1
    PersistentKeepalive = 25
    EOF
  
  # Source environment variables and run bootstrap
  - source /opt/obsidian-env
  - envsubst < /root/obsidian_bootstrap.sh > /root/bootstrap_final.sh
  - chmod +x /root/bootstrap_final.sh
  - /root/bootstrap_final.sh 2>&1 | tee /var/log/obsidian-bootstrap.log
  
  # Set up log rotation
  - |
    cat > /etc/logrotate.d/obsidian << EOF
    /var/log/obsidian-*.log {
        daily
        rotate 30
        compress
        delaycompress
        missingok
        notifempty
        create 0644 root root
    }
    EOF
  
  # Create monitoring cron job
  - /opt/system-monitor.sh
  - echo "*/5 * * * * /opt/system-monitor.sh" | crontab -
  
  # Restart SSH with new configuration
  - systemctl restart ssh
  
  # Wait for services to stabilize, then register with C&C
  - nohup bash -c 'sleep 120 && /opt/register-with-cnc.sh' > /var/log/obsidian-registration.log 2>&1 &
  
  # Final system status
  - sleep 30
  - systemctl status ssh >> /var/log/obsidian-status.log
  - systemctl status docker >> /var/log/obsidian-status.log
  - systemctl status wg-quick@wg0 >> /var/log/obsidian-status.log 2>&1 || true
  - systemctl status cockpit.socket >> /var/log/obsidian-status.log 2>&1 || true

# Final message
final_message: |
  Obsidian Client Node deployment initiated via cloud-init.
  
  Monitor deployment progress:
  - Bootstrap log: /var/log/obsidian-bootstrap.log
  - Validation log: /var/log/obsidian-validation.log
  - Registration log: /var/log/obsidian-registration.log
  - System status: /var/log/obsidian-status.log
  - Cloud-init log: /var/log/cloud-init-output.log
  
  Once deployment completes (10-15 minutes), this node will:
  - Join the WireGuard VPN
  - Register with the C&C server
  - Be accessible via Cockpit management interface
  
  SSH access: ssh obsidian@<server-ip>
  
  Important: Ensure the C&C server is running and accessible!

# Power state management
power_state:
  delay: "+1"
  mode: reboot
  message: "Rebooting after Obsidian client node installation"
  condition: true
